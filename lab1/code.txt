#include <stdlib.h>
#include <stdio.h>
#include "pri_queue.h"
/** @file pri_queue.c */
static Node_ptr_t head = NULL;




/**
 * Insert a Node into a priority queue.
 * @param priority
 * @param data
 * @author Romit Sagu
 */
void PQ_insert(int priority, char * data) {
 //FIX THIS
    Node_ptr_t temp = malloc(sizeof(Node_ptr_t));
    Node_ptr_t temp2 = malloc(sizeof(Node_ptr_t));
    Node_ptr_t new = malloc(sizeof(Node_ptr_t));
    new->priority = priority;
    new->data = data;
    
    temp = head;
    if (head == NULL){ // Works up to assert 5
        head = new;
    }
    else if (head->priority <= priority){ // If the head<new priorty the new becomes the head and the last head comes next
        temp->data = head->data;           // Works up to assert 8 
        temp->priority = head->priority;
        temp->next = head->next;
        head = new;
        head->next = temp;
    }
    else if (head->priority > priority){
        while (temp->next != NULL && new->priority < temp->next->priority){
            temp = temp->next;
        }
        if (temp->next != NULL){ 
            temp2 = temp->next; // If the while loop ends somewhere in the middle
            temp->next = new;
            new->next = temp2;
        }
        /*else {
            temp->next = new; // Needs to be inserted into the last priority
            new->next = NULL;
        }*/
    }
}






/**
 * Delete and return the node with the highest priority.
 * @return The highest priority Node.
 */
Node_ptr_t PQ_delete() {
    //FIX THIS
    Node_ptr_t temp = head;
    head = head->next;
    return NULL;
}









/**
 * Do NOT modify this function.
 * @return A pointer to the head of the list.  (NULL if list is empty.)
 */
Node_ptr_t PQ_get_head() {
    return head;
}

/**
 * Do NOT modify this function.
 * @return the number of items in the queue
 */
int PQ_get_size() {
    int size = 0;
    Node_ptr_t tmp;
    for(tmp = head; tmp != NULL; tmp = tmp->next, size++)
        ;
    return size;
}


